generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  password        String
  role            Role             @default(USER)
  currentAmount   Int              @default(0)
  profilePicture  String?          @default("")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  airlinePartners AirlinePartner[]
  HotelPartnerS   HotelPartner[]
  transactions    Transaction[]
}

model Airport {
  id               String   @id @default(cuid())
  name             String
  code             String
  city             String
  imageUrl         String?
  arrivalFlights   Flight[] @relation("ArrivalRelation")
  departureFlights Flight[] @relation("DepartureRelation")
}

model Airline {
  id              String           @id @default(cuid())
  name            String
  description     String
  airlinePartners AirlinePartner[]
  planes          Plane[]
}

model PlaneType {
  id          String  @id @default(cuid())
  name        String
  manufacture String
  planes      Plane[]
}

model Plane {
  id             String         @id @default(cuid())
  planeTypeId    String
  airlineId      String
  name           String
  flights        Flight[]
  airline        Airline        @relation(fields: [airlineId], references: [id])
  planeType      PlaneType      @relation(fields: [planeTypeId], references: [id])
  seatCategories SeatCategory[]
}

model AirlinePartner {
  id        String  @id @default(cuid())
  airlineId String
  partnerId String
  airline   Airline @relation(fields: [airlineId], references: [id])
  partner   User    @relation(fields: [partnerId], references: [id])
}

model SeatCategory {
  id      String @id @default(cuid())
  planeId String
  name    String
  price   Int
  seats   Seat[]
  plane   Plane  @relation(fields: [planeId], references: [id])
}

model Seat {
  id             String       @id @default(cuid())
  seatCategoryId String
  name           String
  seatCategory   SeatCategory @relation(fields: [seatCategoryId], references: [id])
  tickets        Ticket[]
}

model Flight {
  id                 String   @id @default(cuid())
  planeId            String
  departureAirportId String
  arrivalAirportId   String
  flightCode         String
  price              Int @default(0)
  departureTime      DateTime
  arrivalTime        DateTime
  arrivalAirport     Airport  @relation("ArrivalRelation", fields: [arrivalAirportId], references: [id])
  departureAirport   Airport  @relation("DepartureRelation", fields: [departureAirportId], references: [id])
  plane              Plane    @relation(fields: [planeId], references: [id])
  tickets            Ticket[]
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  transactionType TransactionType   @default(PURCHASE)
  price           Int
  status          StatusTransaction @default(ORDERED)
  reservations    Reservation[]
  tickets         Ticket[]
  user            User              @relation(fields: [userId], references: [id])
}

model Ticket {
  id            String      @id @default(cuid())
  seatId        String
  flightId      String
  transactionId String
  name          String
  nik           String
  type          Type        @default(ADULT)
  gender        Gender      @default(MALE)
  flight        Flight      @relation(fields: [flightId], references: [id])
  seat          Seat        @relation(fields: [seatId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Location {
  id     String  @id @default(cuid())
  city   String
  hotels Hotel[]
}

model Hotel {
  id            String         @id @default(cuid())
  locationId    String
  name          String
  description   String
  contact       String
  address       String
  location      Location       @relation(fields: [locationId], references: [id])
  hotelImages   HotelImage[]
  hotelPartners HotelPartner[]
  roomTypes     RoomType[]
}

model HotelImage {
  id       String @id @default(cuid())
  hotelId  String
  imageUrl String
  hotel    Hotel  @relation(fields: [hotelId], references: [id])
}

model HotelPartner {
  id        String @id @default(cuid())
  partnerId String
  hotelId   String
  hotel     Hotel  @relation(fields: [hotelId], references: [id])
  partner   User   @relation(fields: [partnerId], references: [id])
}

model RoomType {
  id                 String             @id @default(cuid())
  hotelId            String
  typeName           String
  capacity           Int
  price              Int
  rooms              Room[]
  hotel              Hotel              @relation(fields: [hotelId], references: [id])
  roomTypeFacilities RoomTypeFacility[]
}

model Facility {
  id                 String             @id @default(cuid())
  facilityName       String             @unique
  roomTypeFacilities RoomTypeFacility[]
}

model RoomTypeFacility {
  id         String   @id @default(cuid())
  facilityId String
  roomTypeId String
  amount     Int
  facility   Facility @relation(fields: [facilityId], references: [id])
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
}

model Room {
  id               String            @id @default(cuid())
  roomTypeId       String
  name             String
  roomType         RoomType          @relation(fields: [roomTypeId], references: [id])
  roomImages       RoomImage[]
  roomReservations RoomReservation[]
}

model RoomImage {
  id       String @id @default(cuid())
  roomId   String
  urlImage String
  room     Room   @relation(fields: [roomId], references: [id])
}

model Reservation {
  id               String            @id @default(cuid())
  transactionId    String
  startDate        DateTime
  endDate          DateTime
  transaction      Transaction       @relation(fields: [transactionId], references: [id])
  roomReservations RoomReservation[]
}

model RoomReservation {
  id            String      @id @default(cuid())
  reservationId String
  roomId        String
  amount        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  room          Room        @relation(fields: [roomId], references: [id])
}

enum Role {
  USER
  ADMIN
  MITRA_HOTEL
  MITRA_PENERBANGAN
}

enum StatusTransaction {
  ORDERED
  CANCELED
  PAID
}

enum TransactionType {
  DEPOSIT
  PURCHASE
}

enum Type {
  ADULT
  CHILDREN
}

enum Gender {
  MALE
  FEMALE
}
